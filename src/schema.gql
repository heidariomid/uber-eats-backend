# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  updatedAt: DateTime
  createdAt: DateTime
  name: String!
  iconImg: String
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Float!
  updatedAt: DateTime
  createdAt: DateTime
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
}

enum UserRole {
  Owner
  Client
  Delivery
}

type Restaurant {
  id: Float!
  updatedAt: DateTime
  createdAt: DateTime
  name: String!
  coverImg: String!
  address: String!
  category: Category
  owner: User!
  menu: [Dish!]!
}

type DishOption {
  name: String!
  choices: [String!]
  extra: Int
}

type Dish {
  id: Float!
  updatedAt: DateTime
  createdAt: DateTime
  name: String!
  photo: String
  description: String
  price: Int!
  restaurant: Restaurant!
  options: [DishOption!]
}

type CategoriesOutput {
  message: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  message: String
  ok: Boolean!
  totalPages: Int
  category: Category
}

type CreateRestaurantOutput {
  message: String
  ok: Boolean!
}

type RestaurantsOutput {
  message: String
  ok: Boolean!
  totalPages: Int
  restaurants: [Restaurant!]
  totalRestaurants: Int
}

type RestaurantOutput {
  message: String
  ok: Boolean!
  restaurant: Restaurant
}

type DeleteRestaurantOutput {
  message: String
  ok: Boolean!
}

type CreateDishOutput {
  message: String
  ok: Boolean!
}

type DeleteDishOutput {
  message: String
  ok: Boolean!
}

type EditDishOutput {
  message: String
  ok: Boolean!
}

type EditRestaurantOutput {
  message: String
  ok: Boolean!
}

type SearchRestaurantOutput {
  message: String
  ok: Boolean!
  totalPages: Int
  restaurants: [Restaurant!]
  totalRestaurants: Int
}

type UpdateUserOutput {
  message: String
  ok: Boolean!
}

type UserProfileOutput {
  message: String
  ok: Boolean!
  user: User
}

type ValidateEmailOutput {
  message: String
  ok: Boolean!
}

type createAccountOutput {
  message: String
  ok: Boolean!
}

type loginOutput {
  message: String
  ok: Boolean!
  token: String
}

type Query {
  getRestaurants(data: RestaurantsInput!): RestaurantsOutput!
  getRestaurant(data: RestaurantInputType!): RestaurantOutput!
  searchRestaurants(data: SearchRestaurantInput!): SearchRestaurantOutput!
  getCategories: CategoriesOutput!
  getCategory(data: CategoryInputType!): CategoryOutput!
  users: [User!]!
  loggedInUser: User!
  userProfile(userId: Float!): UserProfileOutput!
}

input RestaurantsInput {
  page: Int = 1
}

input RestaurantInputType {
  restaurantId: Int!
}

input SearchRestaurantInput {
  page: Int = 1
  query: String
}

input CategoryInputType {
  page: Int = 1
  slug: String!
}

type Mutation {
  createRestaurant(data: CreateRestaurantInput!): CreateRestaurantOutput!
  editRestaurant(data: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(data: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDishe(data: CreateDishInput!): CreateDishOutput!
  deleteDish(dishId: Float!): DeleteDishOutput!
  editDish(data: EditDishInput!): EditDishOutput!
  addUser(data: addUserArgs!): User!
  updateUser(data: UpdateUserInput!): UpdateUserOutput!
  validateEmail(data: ValidateEmailInput!): ValidateEmailOutput!
  createAccount(data: createAccountInput!): createAccountOutput!
  login(data: loginInput!): loginOutput!
}

input CreateRestaurantInput {
  name: String!
  coverImg: String!
  address: String!
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImg: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  name: String
  coverImg: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  description: String
  price: Int!
  options: [DishtOptionInput!]
  restaurantId: Int!
}

input DishtOptionInput {
  name: String!
  choices: [String!]
  extra: Int
}

input EditDishInput {
  name: String
  description: String
  price: Int
  options: [DishtOptionInput!]
  restaurantId: Int
  dishId: Float!
}

input addUserArgs {
  updatedAt: DateTime
  createdAt: DateTime
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [RestaurantInput!]!
}

input RestaurantInput {
  name: String!
  coverImg: String!
  address: String!
  category: CategoryInput
  owner: UserInput!
  menu: [DishInput!]!
}

input CategoryInput {
  name: String!
  iconImg: String
  slug: String!
  restaurants: [RestaurantInput!]!
}

input UserInput {
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [RestaurantInput!]!
}

input DishInput {
  name: String!
  photo: String
  description: String
  price: Int!
  restaurant: RestaurantInput!
  options: [DishtOptionInput!]
}

input UpdateUserInput {
  email: String
  password: String
  role: UserRole
}

input ValidateEmailInput {
  code: String!
}

input createAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input loginInput {
  email: String!
  password: String!
}